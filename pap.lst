

HI-TECH Software PICC Macro Assembler V8.05PL2
Serial number: HCPIC-00000                            Thu Nov 10 14:45:12 2022

Licensed to: MITSOS FOREVER
     1                           	processor	16F84A
     2                           	opt	pw 79
     3                           	psect	__Z00000RS_,global,delta=1
     4                           	psect	text0,local,class=CODE,delta=2
     5                           	psect	text1,local,class=CODE,delta=2
     6                           	psect	text2,local,class=CODE,delta=2
     7                           	psect	text3,local,class=CODE,delta=2
     8                           	psect	text4,local,class=CODE,delta=2
     9                           	psect	text5,local,class=CODE,delta=2
    10                           	psect	text6,local,class=CODE,delta=2
    11                           	psect	text7,local,class=CODE,delta=2
    12                           	psect	text8,local,class=CODE,delta=2
    13                           	psect	rbss_0,global,class=BANK0,space=1,delta=
      +                          1
    14                           	psect	temp,global,ovrld,class=BANK0,space=1,de
      +                          lta=1
    15  0000                     
    16  0000                     
    17  0000                     
    18  0000                     
    19  0000                     
    20  0000                     
    21  0000                     
    22  0000                     
    23  0000                     
    24  0000                     
    25                           
    26                           	psect	__Z00000RS_
    27  001A                     
    28  001A                     
    29                           
    30                           	psect	text0
    31  035E                     _convPasoSecuencia
    32                           ;	_a assigned to ?a_convPasoSecuencia+0
    33  0000                     _convPasoSecuencia$a	set	?a_convPasoSecuencia
    34                           ;	_sec assigned to ?a_convPasoSecuencia+1
    35  0000                     _convPasoSecuencia$sec	set	?a_convPasoSecuencia
      +                          +1
    36                           ;_a stored from w
    37  035E  1283               	bcf	3,5
    38  035F  0095               	movwf	?a_convPasoSecuencia
    39                           ;pap.c: 17: unsigned char sec;
    40  0360  2B6A               	goto	l3
    41  0361                     l4
    42                           ;pap.c: 20: {
    43  0361  3030               	movlw	48
    44  0362  2B68               	goto	L3
    45  0363                     l5
    46                           ;pap.c: 22: case 2: sec = 0b00000110<<4; break;
    47  0363  3060               	movlw	96
    48  0364  2B68               	goto	L3
    49  0365                     l6
    50                           ;pap.c: 23: case 3: sec = 0b00001100<<4; break;
    51  0365  30C0               	movlw	-64
    52  0366  2B68               	goto	L3
    53  0367                     l7
    54                           ;pap.c: 24: case 4: sec = 0b00001001<<4; break;
    55  0367  3090               	movlw	-112
    56  0368                     L3
    57  0368  0096               	movwf	?a_convPasoSecuencia+1
    58  0369  2B78               	goto	l2
    59  036A                     l3
    60  036A  1283               	bcf	3,5
    61  036B  0815               	movf	?a_convPasoSecuencia,w
    62  036C  3A01               	xorlw	1
    63  036D  1903               	btfsc	3,2
    64  036E  2B61               	goto	l4
    65  036F  3A03               	xorlw	3
    66  0370  1903               	btfsc	3,2
    67  0371  2B63               	goto	l5
    68  0372  3A01               	xorlw	1
    69  0373  1903               	btfsc	3,2
    70  0374  2B65               	goto	l6
    71  0375  3A07               	xorlw	7
    72  0376  1903               	btfsc	3,2
    73  0377  2B67               	goto	l7
    74  0378                     l2
    75                           ;pap.c: 28: return sec;
    76  0378  0816               	movf	?a_convPasoSecuencia+1,w
    77                           ;pap.c: 29: }
    78  0379  0008               	return
    79                           
    80                           	psect	text1
    81                           ;pap.c: 32: void papBegin(void)
    82                           ;pap.c: 33: {
    83  02ED                     _papBegin
    84                           ;pap.c: 36: TRISB &= 0b00001111;
    85  02ED  300F               	movlw	15
    86  02EE  1683               	bsf	3,5
    87  02EF  0586               	andwf	6	;volatile
    88                           ;pap.c: 41: ld=0;
    89  02F0  1283               	bcf	3,5
    90  02F1  018F               	clrf	_ld
    91                           ;pap.c: 42: pAnterior=0b00000000;
    92  02F2  0191               	clrf	_pAnterior
    93                           ;pap.c: 43: mxCiclo=0b00010001;
    94  02F3  3011               	movlw	17
    95  02F4  0090               	movwf	_mxCiclo
    96                           ;pap.c: 44: }
    97  02F5  0008               	return
    98                           
    99                           	psect	text2
   100                           ;pap.c: 49: char buff_pap(void){
   101  02E4                     _buff_pap
   102                           ;	_temp assigned to ?a_buff_pap+0
   103  0000                     _buff_pap$temp	set	?a_buff_pap
   104                           ;pap.c: 50: unsigned char temp;
   105  02E4  1283               	bcf	3,5
   106  02E5  0E06               	swapf	6,w	;volatile
   107  02E6  39F0               	andlw	240
   108  02E7  0095               	movwf	?a_buff_pap
   109                           ;pap.c: 53: temp = temp >> 4;
   110  02E8  0E95               	swapf	?a_buff_pap
   111  02E9  300F               	movlw	15
   112  02EA  0595               	andwf	?a_buff_pap
   113                           ;pap.c: 57: return temp;
   114  02EB  0815               	movf	?a_buff_pap,w
   115                           ;pap.c: 58: }
   116  02EC  0008               	return
   117                           
   118                           	psect	text3
   119                           ;pap.c: 64: char getStepM1(void)
   120                           ;pap.c: 65: {
   121  02C6                     _getStepM1
   122                           ;	_m2C assigned to ?a_getStepM1+0
   123  0000                     _getStepM1$m2C	set	?a_getStepM1
   124                           ;pap.c: 66: unsigned char m2C;
   125  02C6  1283               	bcf	3,5
   126  02C7  0E10               	swapf	_mxCiclo,w
   127  02C8  390F               	andlw	15
   128  02C9  0095               	movwf	?a_getStepM1
   129                           ;pap.c: 71: }
   130  02CA  0008               	return
   131                           
   132                           	psect	text4
   133                           ;pap.c: 89: void papMove(unsigned char pActual)
   134                           ;pap.c: 90: {
   135  03A2                     _papMove
   136                           ;	_pActual assigned to ?a_papMove+0
   137  0000                     _papMove$pActual	set	?a_papMove
   138                           ;	_m2Ciclo assigned to ?a_papMove+1
   139  0000                     _papMove$m2Ciclo	set	?a_papMove+1
   140                           ;_pActual stored from w
   141  03A2  1283               	bcf	3,5
   142  03A3  0095               	movwf	?a_papMove
   143                           ;pap.c: 91: unsigned char m2Ciclo = getStepM1()
      +                          ;
   144  03A4  1283               	bcf	3,5
   145  03A5  22C6               	call	_getStepM1
   146  03A6  0096               	movwf	?a_papMove+1
   147                           ;pap.c: 99: if (!!((pActual) & (1 << (1)))==1 &
      +                          & !!((pAnterior) & (1 << (1)))==0)
   148  03A7  1895               	btfsc	?a_papMove,1
   149  03A8  1891               	btfsc	_pAnterior,1
   150  03A9  2BB9               	goto	l12
   151                           ;pap.c: 100: {
   152  03AA  1C15               	btfss	?a_papMove,0
   153  03AB  2BB3               	goto	l13
   154                           ;pap.c: 102: {
   155  03AC  0816               	movf	?a_papMove+1,w
   156  03AD  3A04               	xorlw	4
   157  03AE  1D03               	btfss	3,2
   158  03AF  2BB1               	goto	l14
   159                           ;pap.c: 104: m2Ciclo=1;
   160  03B0  0196               	clrf	?a_papMove+1
   161                           ;pap.c: 105: else
   162  03B1                     l14
   163                           ;pap.c: 106: m2Ciclo++;
   164  03B1  0A96               	incf	?a_papMove+1
   165                           ;pap.c: 107: }
   166  03B2  2BB9               	goto	l12
   167  03B3                     l13
   168                           ;pap.c: 109: {
   169  03B3  0B16               	decfsz	?a_papMove+1,w
   170  03B4  2BB8               	goto	l17
   171                           ;pap.c: 111: m2Ciclo=4;
   172  03B5  3004               	movlw	4
   173  03B6  0096               	movwf	?a_papMove+1
   174                           ;pap.c: 112: else
   175  03B7  2BB9               	goto	l12
   176  03B8                     l17
   177                           ;pap.c: 113: m2Ciclo--;
   178  03B8  0396               	decf	?a_papMove+1
   179                           ;pap.c: 114: }
   180  03B9                     l12
   181                           ;pap.c: 115: }
   182  03B9  22E4               	call	_buff_pap
   183  03BA  0099               	movwf	btemp+1
   184  03BB  0816               	movf	?a_papMove+1,w
   185  03BC  235E               	call	_convPasoSecuencia
   186  03BD  0419               	iorwf	btemp+1,w
   187  03BE  0086               	movwf	6	;volatile
   188                           ;pap.c: 143: if (ld==1)
   189  03BF  0B0F               	decfsz	_ld,w
   190  03C0  2BC9               	goto	l19
   191                           ;pap.c: 144: PORTA = convPasoSecuencia(m2Ciclo)
      +                           >> 4;
   192  03C1  0816               	movf	?a_papMove+1,w
   193  03C2  235E               	call	_convPasoSecuencia
   194  03C3  0098               	movwf	btemp
   195  03C4  0E98               	swapf	btemp
   196  03C5  300F               	movlw	15
   197  03C6  0598               	andwf	btemp
   198  03C7  0818               	movf	btemp,w
   199  03C8  0085               	movwf	5	;volatile
   200  03C9                     l19
   201                           ;pap.c: 146: mxCiclo = ( m2Ciclo << 4);
   202  03C9  0E16               	swapf	?a_papMove+1,w
   203  03CA  39F0               	andlw	240
   204  03CB  0090               	movwf	_mxCiclo
   205                           ;pap.c: 152: pAnterior = pActual;
   206  03CC  0815               	movf	?a_papMove,w
   207  03CD  0091               	movwf	_pAnterior
   208                           ;pap.c: 155: }
   209  03CE  0008               	return
   210                           
   211                           	psect	text5
   212                           ;pap.c: 159: void papStop(void){
   213  02CB                     _papStop
   214                           ;pap.c: 160: PORTB = 0b00000000;
   215  02CB  1283               	bcf	3,5
   216  02CC  0186               	clrf	6	;volatile
   217                           ;pap.c: 161: pAnterior=0b00000000;
   218  02CD  0191               	clrf	_pAnterior
   219                           ;pap.c: 162: mxCiclo=0b00010001;
   220  02CE  3011               	movlw	17
   221  02CF  0090               	movwf	_mxCiclo
   222                           ;pap.c: 163: }
   223  02D0  0008               	return
   224                           
   225                           	psect	text6
   226                           ;pap.c: 165: void papMoveManual(unsigned char a
      +                          ){
   227  02D7                     _papMoveManual
   228                           ;	_a assigned to ?a_papMoveManual+0
   229  0000                     _papMoveManual$a	set	?a_papMoveManual
   230                           ;_a stored from w
   231  02D7  1283               	bcf	3,5
   232  02D8  0095               	movwf	?a_papMoveManual
   233                           ;pap.c: 166: papMove(a);
   234  02D9  1283               	bcf	3,5
   235  02DA  23A2               	call	_papMove
   236                           ;pap.c: 167: papMove(0b00000000);
   237  02DB  3000               	movlw	0
   238  02DC  2BA2               	goto	_papMove
   239                           
   240                           	psect	text7
   241                           ;pap.c: 171: void papLedTest(void)
   242                           ;pap.c: 172: {
   243  02BA                     _papLedTest
   244                           ;pap.c: 173: ld = 1;
   245  02BA  1283               	bcf	3,5
   246  02BB  018F               	clrf	_ld
   247  02BC  0A8F               	incf	_ld
   248                           ;pap.c: 174: }
   249  02BD  0008               	return
   250                           
   251                           	psect	text8
   252  0000                     
   253  0000                     
   254  0000                     
   255  0000                     
   256  0000                     
   257  0000                     
   258  0000                     
   259  0000                     
   260  0000                     
   261  0000                     
   262  0000                     
   263  0000                     
   264  0000                     
   265  0000                     
   266  0000                     
   267  0000                     
   268  0000                     
   269  0000                     
   270  0000                     
   271  0000                     
   272  0000                     
   273  0000                     
   274  0000                     
   275  0000                     
   276  0000                     
   277  0000                     
   278  0000                     
   279  0000                     
   280  0000                     
   281  0000                     
   282  0000                     
   283  0000                     
   284  0000                     
   285  0000                     
   286  0000                     
   287  0000                     
   288  0000                     
   289  0000                     
   290  0000                     
   291  0000                     
   292  0000                     
   293  0000                     
   294  0000                     
   295  0000                     
   296  0000                     
   297  0000                     
   298  0000                     
   299  0000                     
   300  0000                     
   301  0000                     
   302  0000                     
   303  0000                     
   304  0000                     
   305  0000                     
   306  0000                     
   307  0000                     
   308  0000                     
   309  0000                     
   310  0000                     
   311  0000                     
   312  0000                     
   313  0000                     
   314  0000                     
   315  0000                     
   316  0000                     
   317  0000                     
   318  0000                     
   319  0000                     
   320  0000                     
   321  0000                     
   322  0000                     
   323  0000                     
   324  0000                     
   325  0000                     
   326  0000                     
   327  0000                     
   328  0000                     
   329  0000                     
   330  0000                     
   331  0000                     
   332  0000                     
   333  0000                     
   334  0000                     
   335  0000                     
   336  0000                     
   337  0000                     
   338  0000                     
   339  0000                     
   340  0000                     
   341  0000                     
   342  0000                     
   343  0000                     
   344  0000                     
   345  0000                     
   346  0000                     
   347  0000                     
   348                           
   349                           	psect	rbss_0
   350  000F                     _ld
   351  000F                     	ds	1
   352  0010                     _mxCiclo
   353  0010                     	ds	1
   354  0011                     _pAnterior
   355  0011                     	ds	1
   356                           
   357                           	psect	temp
   358  0018                     btemp
   359  0018                     	ds	2


HI-TECH Software PICC Macro Assembler V8.05PL2
Symbol Table                                          Thu Nov 10 14:45:12 2022

                    l2 0378                      l3 036A  
                    l4 0361                      l5 0363  
                    l6 0365                      l7 0367  
                   l12 03B9                     l13 03B3  
                   l14 03B1                     l17 03B8  
                   l19 03C9                     _ld 000F  
             _buff_pap 02E4               _papBegin 02ED  
            _getStepM1 02C6              ?a_papMove 0015  
                 btemp 0018    ?a_convPasoSecuencia 0015  
        _papMoveManual 02D7             _papLedTest 02BA  
           ?a_buff_pap 0015        ?a_papMoveManual 0015  
              _mxCiclo 0010                _papMove 03A2  
              _papStop 02CB      _convPasoSecuencia 035E  
                status 0003             clear_bank0 0017  
          ?a_getStepM1 0015              _pAnterior 0011  
           used_btemp0 0001             used_btemp1 0001  
